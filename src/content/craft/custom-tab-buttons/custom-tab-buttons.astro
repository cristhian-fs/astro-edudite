<section class="craft-item__container-outer">
  <div class="craft-item__container tabs-section">
    <div class="tab-btns-wrapper">
      <button data-tab-btn>Button cta</button>
      <button data-tab-btn>Button</button>
      <button data-tab-btn>Button call to action</button>
      <button data-tab-btn>Button wrapper</button>
    </div>
  </div>
</section>

<script>
  const tabBtns = Array.from(document.querySelectorAll("[data-tab-btn]"));
  const tabsWrapper = document.querySelector(".tab-btns-wrapper") as HTMLDivElement;
  let activeBtn = document.querySelector("[data-tab-btn].active") || tabBtns[0];

  tabBtns.forEach((btn, index) => {
    btn.addEventListener("click", () => {
      activeBtn = btn;
      animatePseudoElement({
        target: tabsWrapper, 
        targetCoords: tabsWrapper.getBoundingClientRect(), 
        coords: btn.getBoundingClientRect(), 
        index: tabBtns.indexOf(btn),
        totalBtns: tabBtns.length
      });
    });

  });

  // Configura o estado inicial
  animatePseudoElement({
    target: tabsWrapper, 
    targetCoords: tabsWrapper.getBoundingClientRect(), 
    coords: activeBtn.getBoundingClientRect(), 
    index: tabBtns.indexOf(activeBtn),
    totalBtns: tabBtns.length
  });
  
  // Função para animar as propriedades CSS (inclui border-radius dinâmico)
  function animatePseudoElement({target, targetCoords, coords, index, totalBtns}: {
    target: HTMLDivElement,
    targetCoords: DOMRect,
    coords: DOMRect,
    index: number,
    totalBtns: number
  }) {
    const { x: xParent, y: yParent } = targetCoords;
    const { x,y, width, height } = coords;

    // Define o border-radius baseado na posição do botão
    const borderRadius = determineBorderRadius(index, totalBtns);

    target.style.setProperty('--x-position', `${x - xParent}px`);
    target.style.setProperty('--y-position', `${y - yParent}px`);
    target.style.setProperty('--active-tab-width', `${width}px`);
    target.style.setProperty('--active-tab-height', `${height}px`);
    target.style.setProperty('--radius', borderRadius);
  }

  // Função para calcular o border-radius
  function determineBorderRadius(index: number, totalBtns: number): string {
    if (index === 0) {
      return '32px 4px 4px 32px';  // Primeiro botão
    }
    if (index === totalBtns - 1) {
      return '4px 32px 32px 4px';  // Último botão
    }
    return '32px'; // Botões intermediários
  }

</script>

<style>

button{
  -webkit-appearance: button;
  background-color: transparent;
  background-image: none;
  font-family: inherit;
  font-feature-settings: inherit;
  font-variation-settings: inherit;
  font-size: 100%;
  font-weight: inherit;
  line-height: inherit;
  letter-spacing: inherit;
  color: inherit;
  margin: 0;
  padding: 0;
}


[data-tab-btn] {
  padding-top: 0.25rem;
  padding-bottom: 0.25rem; 
  padding-left: 0.75rem;
  padding-right: 0.75rem; 
  border-radius: 9999px; 
  transition-property: all;
  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
  transition-duration: 300ms;
  
}

.tab-btns::-webkit-scrollbar {
  display: none;
}

.tab-btns-wrapper{
  display: flex; 
  gap: 0.5rem; 
  font-size: 1rem; 
  line-height: 1.75rem; 
  position: relative;
  border: 1px solid var(--color-border);
  background: color-mix(in oklab, var(--color-muted) 20%, transparent);
  z-index: 3;
  border-radius: 32px;
  padding: 4px;
  overflow: hidden;

  &::after{
    content: "";
    position: absolute;
    width: var(--active-tab-width, 0);
    height: var(--active-tab-height,0);
    left: calc(var(--x-position, 0));
    top: var(--y-position, 0);
    background-color: hsl(0 0% 100% / 0.056);
    border: 1px solid var(--color-border);
    border-radius: var(--radius, 32px);
    transition: 0.4s all cubic-bezier(.11,.78,.5,.98);
    pointer-events: none;
    z-index: 1;
    transform: translate(-1px, -1px);
  }
  * {
    z-index: 2;
    position: relative;
    cursor: pointer;
  }
 
}
[data-tab-btn].active{
  color: var(--color-foreground);
}
</style>