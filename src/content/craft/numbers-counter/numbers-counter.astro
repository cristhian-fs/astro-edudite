<section class="craft-item__container-outer">
  <div class="craft-item__container">
    <div class="buttons-wrapper" id="buttons">
      <button class="counter-btn" id="decrease">
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" d="M5 12h14" />
        </svg>
      </button>
      <div class="" id="counter">
        <span class="counters flex flex-col items-center *:h-[60px]">
          <span data-key="0">0</span>
          <span data-key="1">1</span>
          <span data-key="2">2</span>
          <span data-key="3">3</span>
          <span data-key="4">4</span>
          <span data-key="5">5</span>
          <span data-key="6">6</span>
          <span data-key="7">7</span>
          <span data-key="8">8</span>
          <span data-key="9">9</span>
        </span>
        <span class="counters flex flex-col items-center *:h-[60px]">
          <span data-key="0">0</span>
          <span data-key="1">1</span>
          <span data-key="2">2</span>
          <span data-key="3">3</span>
          <span data-key="4">4</span>
          <span data-key="5">5</span>
          <span data-key="6">6</span>
          <span data-key="7">7</span>
          <span data-key="8">8</span>
          <span data-key="9">9</span>
        </span>
        <span class="counters flex flex-col items-center *:h-[60px]">
          <span data-key="0">0</span>
          <span data-key="1">1</span>
          <span data-key="2">2</span>
          <span data-key="3">3</span>
          <span data-key="4">4</span>
          <span data-key="5">5</span>
          <span data-key="6">6</span>
          <span data-key="7">7</span>
          <span data-key="8">8</span>
          <span data-key="9">9</span>
        </span>
        <span class="counters flex flex-col items-center *:h-[60px]">
          <span data-key="0">0</span>
          <span data-key="1">1</span>
          <span data-key="2">2</span>
          <span data-key="3">3</span>
          <span data-key="4">4</span>
          <span data-key="5">5</span>
          <span data-key="6">6</span>
          <span data-key="7">7</span>
          <span data-key="8">8</span>
          <span data-key="9">9</span>
        </span>
      </div>
      <button class="counter-btn" id="increase">
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" d="M12 4.5v15m7.5-7.5h-15" />
        </svg>
      </button>
    </div>
  </div>
</section>
<script src="https://cdn.jsdelivr.net/npm/gsap@3.13.0/dist/gsap.min.js" is:inline></script>

<script is:inline>

document.addEventListener('astro:page-load', () => {
  const PARAMS = {
    limit: 100,
    min_multiplier: 0,
    max_multiplier: 50,
  }

  let initialNumber = 0;
  let previousNumberColumns = [];

  const buttonsDiv = document.getElementById("buttons");
  const increaseBtn = document.getElementById("increase");
  const decreaseBtn = document.getElementById("decrease");

  function getColumnsNumber() {
    return Array.from(document.querySelectorAll(".counters")).reverse();
  }

  let columnsNumber = getColumnsNumber();

  function increaseNumber() {
    initialNumber +=
      Math.floor(Math.random() * (PARAMS.max_multiplier - PARAMS.min_multiplier + 1)) +
      PARAMS.min_multiplier;

    if (initialNumber > PARAMS.limit) {
      initialNumber = PARAMS.limit;
      blockedAction();
    }

    animateNumber(initialNumber);
  }

  function blockedAction() {
    let blockedTl = gsap.timeline({ repeat: 1, repeatDelay: 0.1 });

    blockedTl.to(buttonsDiv, {
      x: 5,
      ease: "bounce.in",
      duration: 0.01,
    });
    blockedTl.to(buttonsDiv, {
      x: -5,
      ease: "bounce.in",
      duration: 0.01,
    });
  }

  function decreaseNumber() {
    if (initialNumber === 0) {
      blockedAction();
      return;
    }

    initialNumber = Math.max(
      0,
      initialNumber -
        (Math.floor(Math.random() * (PARAMS.max_multiplier - PARAMS.min_multiplier + 1)) +
          PARAMS.min_multiplier)
    );

    animateNumber(initialNumber);
  }

  function animateNumber(newNumber) {
    let newNumberColumns = String(newNumber).split("").reverse();

    adjustActiveColumns(newNumberColumns.length);

    columnsNumber.forEach((column, index) => {
      let newNumber = newNumberColumns[index];
      let previousNumber = previousNumberColumns[index];

      if (newNumber !== previousNumber) {
        gsap.to(column, {
          duration: 0.5,
          y: `-${newNumber * 60}px`,
          ease: "power3.inOut",
          filter: "blur(2px)",
          onComplete: () => {
            gsap.set(column, {
              filter: "blur(0px)",
              ease: "power3.out",
            });
          },
        });
      }
    });

    // Atualiza previousNumberColumns com os valores atuais
    previousNumberColumns = newNumberColumns;
  }

  function hideColumns() {
    let numberColumns = String(initialNumber).split("");
    const columns = document.querySelectorAll(".counters");

    // Loop para ocultar as colunas extra da esquerda para a direita
    for (let i = 0; i < columns.length; i++) {
      if (i < columns.length - numberColumns.length) {
        gsap.set(columns[i], { opacity: 0, width: 0 });
      } else {
        gsap.set(columns[i], { opacity: 1, width: "auto" });
      }
    }
  }

  function adjustActiveColumns(newLength) {
    columnsNumber.forEach((column, index) => {
      if (index < newLength) {
        gsap.to(column, {
          opacity: 1,
          width: "auto",
          duration: 0.1,
          ease: "power2.out",
        });
      } else {
        gsap.to(column, {
          opacity: 0,
          width: 0,
          duration: 0.1,
          ease: "power2.out",
        });
      }
    });
  }

  increaseBtn.addEventListener("click", () => {
    increaseNumber();
  });

  decreaseBtn.addEventListener("click", () => {
    decreaseNumber();
  });

    hideColumns();
});

</script>

<style>
.buttons-wrapper{
  display: flex; 
  gap: 2rem; 
  justify-content: center; 
  align-items: center; 
}

.counter-btn{
  border: none;
  display: flex; 
  justify-content: center; 
  align-items: center; 
  border-radius: 9999px; 
  width: 3.5rem; 
  height: 3.5rem; 
  
  cursor: pointer;
  
  background: var(--color-muted);
  color: var(--color-muted-foreground);
  
  
  transition: 0.2s transform cubic-bezier(.77,.02,.35,.96);
  
  &:active{
    transform: scale(0.9);
  }
  & svg{
    width: 1.5rem;
    height: 1.5rem;
  }
}

#counter{
  display: flex; 
  justify-content: center; 
  align-items: start;
  min-width: 4rem;
  mask-image: linear-gradient(to bottom, rgba(255, 255, 255, 0) 0%, rgba(255, 255, 255, 1) 10%, rgba(255, 255, 255, 1) 90%, rgba(255, 255, 255, 0) 100%);
  
  overflow-y: hidden;
  height: 60px;
  transform: translateY(0.5rem);
  
  & span{
    font-size: 3rem;
    line-height: 1;
    font-weight: 600;
  }
}

.counters{
  display: flex;
  flex-direction: column;
  align-items: center;
  
  & *{
    height: 60px;
  }
}
</style>
